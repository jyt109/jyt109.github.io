<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>edoc (Programming)</title><link>http://jyt109/github.io</link><description></description><language>en</language><lastBuildDate>Sun, 05 Oct 2014 23:13:55 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Writing Shorter Loops in Python</title><link>http://jyt109/posts/all-sorts-of-list-comprehension.html</link><dc:creator>Jeffrey Tang</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;div class="figure"&gt;
&lt;img src="http://jyt109/posts/list_comp.png"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Wanna &lt;span style="color:red"&gt;not&lt;/span&gt; write 3 lines of code every time you loop through a list ??&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;There are few ways to do so, namely &lt;strong&gt;List Comprehenison&lt;/strong&gt;, &lt;strong&gt;Map( )&lt;/strong&gt; and &lt;strong&gt;Lambda( )&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Here we are gonna cover &lt;strong&gt;when and how&lt;/strong&gt; to use these functions ...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jyt109/posts/all-sorts-of-list-comprehension.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Programming</category><category>Python</category><guid>http://jyt109/posts/all-sorts-of-list-comprehension.html</guid><pubDate>Sat, 06 Sep 2014 06:04:45 GMT</pubDate></item><item><title>The Anagram Problem</title><link>http://jyt109/posts/the-find-anagram-problem.html</link><dc:creator>Jeffrey Tang</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;div class="figure"&gt;
&lt;img src="http://jyt109/posts/doggod.png"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;It was an &lt;strong&gt;interview&lt;/strong&gt;, the &lt;strong&gt;coding kind&lt;/strong&gt; ...&lt;/p&gt;
&lt;p&gt;It was no &lt;strong&gt;&lt;a href="http://c2.com/cgi/wiki?FizzBuzzTest"&gt;FizzBuzz&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;It was &lt;strong&gt;Finding Anagrams&lt;/strong&gt; ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anagrams&lt;/strong&gt; are words with different arrangement of letters.&lt;/p&gt;
&lt;p&gt;E.g. &lt;strong&gt;"dog" and "god"&lt;/strong&gt; &lt;span style="color:red"&gt;/&lt;/span&gt; &lt;strong&gt;"star", "arts" and "rats"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt; Let's dig into the code ...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jyt109/posts/the-find-anagram-problem.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Programming</category><category>Python</category><guid>http://jyt109/posts/the-find-anagram-problem.html</guid><pubDate>Fri, 05 Sep 2014 23:33:27 GMT</pubDate></item></channel></rss>